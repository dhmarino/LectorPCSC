<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GS.CSharpPCSC</name>
    </assembly>
    <members>
        <member name="T:GS.SCard.WinSCard">
            <summary>
            Smart Card and Reader Access Functions
            </summary>
        </member>
        <member name="F:GS.SCard.WinSCard.phContext">
            <summary>
            A handle to the established resource manager context.
            This handle can now be supplied to other functions attempting to do work within this context.
            </summary>
        </member>
        <member name="F:GS.SCard.WinSCard.phCARD">
            <summary>
            A handle that identifies the connection to the smart card.
            </summary>
        </member>
        <member name="F:GS.SCard.WinSCard.readerStrings">
            <summary>
            List of available readers.
            </summary>
        </member>
        <member name="F:GS.SCard.WinSCard.connectedReaderName">
            <summary>
            The connected Reader Name
            </summary>
        </member>
        <member name="F:GS.SCard.WinSCard.activeSCardProtocol">
            <summary>
            Indicates the established active protocol.
            </summary>
        </member>
        <member name="F:GS.SCard.WinSCard.scardTrace">
            <summary>
            Indicates if the Trace is enabled or not.
            </summary>
        </member>
        <member name="M:GS.SCard.WinSCard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="N:GS.PCSC"/> class.
            </summary>
        </member>
        <member name="M:GS.SCard.WinSCard.EstablishContext">
            <summary>
            The EstablishContext function establishes the smart card resourete manager context.
            The context is a user context, and any database operations are performed within the
            domain of the user.
            </summary>
        </member>
        <member name="M:GS.SCard.WinSCard.EstablishContext(GS.SCard.Const.SCARD_SCOPE)">
            <summary>
            The EstablishContext function establishes the smart card resourete manager context.
            </summary>
            <param name="dwScope">
            Scope of the resource manager context.
            </param>
        </member>
        <member name="M:GS.SCard.WinSCard.ListReaders">
            <summary>
            The SCardListReaders function provides the list of readers.
            </summary>
            <returns>
            The names of available readers.
            </returns>
        </member>
        <member name="M:GS.SCard.WinSCard.WaitForCardPresent">
            <summary>
            The WaitForCardPresent function blocks execution until there is one card
            present in the previous selected reader.
            </summary>
        </member>
        <member name="M:GS.SCard.WinSCard.WaitForCardPresent(System.String)">
            <summary>
            The WaitForCardPresent function blocks execution until there is one card in the reader.
            </summary>
            <param name="szReader">
            The name of the reader that contains the target card.
            </param>
        </member>
        <member name="M:GS.SCard.WinSCard.WaitForCardRemoval">
            <summary>
            The WaitForCardRemoval function blocks execution until there is no card         
            present in the previous selected the selected reader.
            </summary>
        </member>
        <member name="M:GS.SCard.WinSCard.WaitForCardRemoval(System.String)">
            <summary>
            The WaitForCardRemoval function blocks execution until there is no card in the reader.
            </summary>
            <param name="szReader">
            The name of the reader that contains the target card.
            </param>
        </member>
        <member name="M:GS.SCard.WinSCard.GetCardPresentState(System.String)">
            <summary>
            Gets a value indicating whether smart card is present.
            </summary>
            <param name="szReader">
            The name of the reader that contains the target card.
            </param>
            <value><c>true</c> if [card activated]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:GS.SCard.WinSCard.Connect(System.String)">
            <summary>
            The SCardConnect function establishes a connection (using a specific resource manager context) 
            between the calling application and a smart card contained by a specific reader. 
            If no card exists in the specified reader, an error is returned.
            </summary>
            <param name="szReader">
            The name of the reader that contains the target card.
            </param>
        </member>
        <member name="M:GS.SCard.WinSCard.Connect(System.String,GS.SCard.Const.SCARD_SHARE_MODE,GS.SCard.Const.SCARD_PROTOCOL)">
            <summary>
            The SCardConnect function establishes a connection (using a specific resource manager context) 
            between the calling application and a smart card contained by a specific reader. 
            If no card exists in the specified reader, an error is returned.
            </summary>
            <param name="szReader">
            The name of the reader that contains the target card.
            </param>
            <param name="dwShareMode">
            A flag that indicates whether other applications may form connections to the card.
            </param>
            <param name="dwPrefProtocol">
            A bitmask of acceptable protocols for the connection. Possible values may be combined with the OR operation.
            </param>
        </member>
        <member name="M:GS.SCard.WinSCard.Transmit(System.Byte[],System.Int32,System.Byte[],System.Int32@)">
            <summary>
            The SCardTransmit function sends a service request to the smart card and expects to receive data back from the card.
            </summary>
            <param name="sendBuffer">
            The actual data to be written to the card.
            </param>
            <param name="sendLength">
            The length, in bytes, of the sendBuffer parameter.
            </param>
            <param name="responseBuffer">
            Returned data from the card.
            </param>
            <param name="responseLength">
            Supplies the length, in bytes, of the responseBuffer parameter and receives the actual
            number of bytes received from the smart card.
            </param>
        </member>
        <member name="M:GS.SCard.WinSCard.GetAttrib(GS.SCard.Const.SCARD_ATTR)">
            <summary>
            The SCardGetAttrib function gets the current reader attributes.
            It does not affect the state of the reader, driver, or card.
            </summary>
            <param name="AttrId">
            Identifier for the attribute to get.
            </param>
        </member>
        <member name="M:GS.SCard.WinSCard.GetAttrib(System.UInt32)">
            <summary>
            The SCardGetAttrib function gets the current reader attributes.
            It does not affect the state of the reader, driver, or card.
            </summary>
            <param name="AttrId">
            Identifier for the attribute to get.
            </param>
        </member>
        <member name="M:GS.SCard.WinSCard.GetAttrib(GS.SCard.Const.SCARD_ATTR,System.Byte[],System.Int32@)">
            <summary>
            The SCardGetAttrib function gets the current reader attributes.
            It does not affect the state of the reader, driver, or card.
            </summary>
            <param name="attrId">
            Identifier for the attribute to get.
            </param>
            <param name="responseBuffer">
            The response buffer.
            </param>
            <param name="responseLength">
            Supplies the length of the responseBuffer in bytes, and receives the actual length 
            of the received attribute.
            </param>
        </member>
        <member name="M:GS.SCard.WinSCard.GetAttrib(System.UInt32,System.Byte[],System.Int32@)">
            <summary>
            The SCardGetAttrib function gets the current reader attributes.
            It does not affect the state of the reader, driver, or card.
            </summary>
            <param name="attrId">
            Identifier for the attribute to get.
            </param>
            <param name="responseBuffer">
            The response buffer.
            </param>
            <param name="responseLength">
            Supplies the length of the responseBuffer in bytes, and receives the actual length 
            of the received attribute.
            </param>
        </member>
        <member name="M:GS.SCard.WinSCard.Control(System.UInt32,System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            The SCardControl function gives you direct control of the reader. 
            You can call it any time after a successful call to SCardConnect and before 
            a successful call to SCardDisconnect. The effect on the state of the reader 
            depends on the control code.
            </summary>
            <param name="dwControlCode">
            Control code for the operation. This value identifies the specific operation to be performed.
            </param>
            <param name="inBuffer">
            A buffer that contains the data required to perform the operation.
            This parameter can be null if the dwControlCode parameter specifies an operation that does
            not require input data.
            </param>
            <param name="inBufferLength">
            Length of the input buffer.
            </param>
            <param name="outBuffer">
            The output buffer.
            </param>
            <param name="outBufferSize">
            Size, in bytes, of the output buffer.
            </param>
            <param name="bytesReturned">
            Supplies the length, in bytes, of the outBuffer parameter.
            </param>
        </member>
        <member name="M:GS.SCard.WinSCard.Disconnect">
            <summary>
            The SCardDisconnect function terminates a connection previously opened between the calling 
            application and a smart card in the target reader.
            </summary>
            <returns>
            If the function succeeds, the function returns SCARD_S_SUCCESS. 
            If the function fails, it returns an error code. 
            </returns>
        </member>
        <member name="M:GS.SCard.WinSCard.Disconnect(GS.SCard.Const.SCARD_DISCONNECT)">
            <summary>
            The SCardDisconnect function terminates a connection previously opened between the calling 
            application and a smart card in the target reader.
            </summary>
            <param name="disposition">
            Action to take on the card in the connected reader on close.
            </param>
            <returns>
            If the function succeeds, the function returns SCARD_S_SUCCESS. 
            If the function fails, it returns an error code. 
            </returns>
        </member>
        <member name="M:GS.SCard.WinSCard.Reconnect">
            <summary>
            The SCardReconnect function reestablishes an existing connection between the calling application and 
            a smart card. This function moves a card handle from direct access to general access, or acknowledges 
            and clears an error condition that is preventing further access to the card.
            </summary>
        </member>
        <member name="M:GS.SCard.WinSCard.Reconnect(GS.SCard.Const.SCARD_DISCONNECT)">
            <summary>
            The SCardReconnect function reestablishes an existing connection between the calling application and 
            a smart card. This function moves a card handle from direct access to general access, or acknowledges 
            and clears an error condition that is preventing further access to the card.
            </summary>
            <param name="disconnectAction">
            Action to take on the card in the connected reader on close.
            </param>
            <returns>
            If the function succeeds, the function returns SCARD_S_SUCCESS. 
            If the function fails, it returns an error code. 
            </returns>
        </member>
        <member name="M:GS.SCard.WinSCard.Reconnect(GS.SCard.Const.SCARD_SHARE_MODE,GS.SCard.Const.SCARD_PROTOCOL,GS.SCard.Const.SCARD_DISCONNECT)">
            <summary>
            The SCardReconnect function reestablishes an existing connection between the calling application and 
            a smart card. This function moves a card handle from direct access to general access, or acknowledges 
            and clears an error condition that is preventing further access to the card.
            </summary>
            <param name="dwShareMode">
            A flag that indicates whether other applications may form connections to the card.
            </param>
            <param name="dwPrefProtocol">
            A bitmask of acceptable protocols for the connection. Possible values may be combined with the OR operation.
            </param>
            <param name="disconnectAction">
            Action to take on the card in the connected reader on close.
            </param>
            <returns>
            If the function succeeds, the function returns SCARD_S_SUCCESS. 
            If the function fails, it returns an error code. 
            </returns>
        </member>
        <member name="M:GS.SCard.WinSCard.ReleaseContext">
            <summary>
            The SCardReleaseContext function closes an established resource manager context, 
            freeing any resources allocated under that context.
            </summary>
            <returns>
            If the function succeeds, the function returns SCARD_S_SUCCESS. 
            If the function fails, it returns an error code. 
            </returns>
        </member>
        <member name="M:GS.SCard.WinSCard.GetSCardCtlCode(System.Int32)">
            <summary>
            This function implements the functionality of the SCARD_CTL_CODE Macro (WinSmCrd.h). 
            
            </summary>
            <param name="code">The Control Code.</param>
            <returns>
            The WinSCardControl dwControlCode.
            </returns>
        </member>
        <member name="M:GS.SCard.WinSCard.AddReaders(System.Windows.Forms.ComboBox)">
            <summary>
            Adds the list of readers to a ComboBox.
            </summary>
            <param name="comboBox">The combo box.</param>
        </member>
        <member name="P:GS.SCard.WinSCard.TraceSCard">
            <summary>
            Gets or sets a value indicating whether the WinSCard trace is enabled or not.
            </summary>
            <value><c>true</c> if [PCSC trace]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GS.SCard.WinSCard.SCardProtocol">
            <summary>
            Gets the established active protocol.
            </summary>
            <value>The active protocol.</value>
        </member>
        <member name="P:GS.SCard.WinSCard.IsRMContextEstablished">
            <summary>
            Gets a value indicating whether the resourete manager context is extablished.
            </summary>
            <value><c>true</c> if [context extablished]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GS.SCard.WinSCard.IsCardContextEstablished">
            <summary>
            Gets a value indicating whether the card context is extablished.
            </summary>
            <value><c>true</c> if [context extablished]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GS.SCard.WinSCard.IsCardPresent">
            <summary>
            Gets a value indicating whether smart card is present in the previous selected reader.
            </summary>
            <value><c>true</c> if [card activated]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:GS.SCard.WinSCard.Atr">
            <summary>
            Gets the Answer to reset (ATR).
            </summary>
            <value>The Answer to reset (ATR).</value>
        </member>
        <member name="P:GS.SCard.WinSCard.AtrString">
            <summary>
            Gets the Answer to reset (ATR) string.
            </summary>
            <value>The Answer to reset (ATR) string.</value>
        </member>
        <member name="P:GS.SCard.WinSCard.ReaderNames">
            <summary>
            Gets an array of the names of available readers.
            </summary>
            <value>The names of available readers.</value>
        </member>
        <member name="P:GS.SCard.WinSCard.ReaderName">
            <summary>
            Gets the name of the previous selected reader.
            </summary>
            <value>The name of the selected reader.</value>
        </member>
        <member name="T:GS.SCard.WinSCardAPIWrapper">
            <summary>
            The winscard.dll (PC/SC = Personal Computer / Smart Card) PInvoke wrapper class.
            Please see also the Platform SDK documentation for descriptions of  native functions.
            Note: Not all of the WinSCard Win32 interface has been implemented here yet.
            </summary>
        </member>
        <member name="M:GS.SCard.WinSCardAPIWrapper.SCardEstablishContext(System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            The SCardEstablishContext function establishes the resource manager context (the scope) 
            within which database operations are performed.
            </summary>
            <param name="dwScope">Scope of the resource manager context..</param>
            <param name="pvReserved1">Reserved for future use and must be IntPtr.Zero.</param>
            <param name="pvReserved2">Reserved for future use and must be IntPtr.Zero.</param>
            <param name="phContext">A handle to the established resource manager context.</param>
            <returns></returns>
        </member>
        <member name="M:GS.SCard.WinSCardAPIWrapper.SCardReleaseContext(System.IntPtr)">
            <summary>
            The SCardReleaseContext function closes an established resource manager context, 
            freeing any resources allocated under that context, including SCARDHANDLE objects 
            and memory allocated using the SCARD_AUTOALLOCATE length designator.
            </summary>
            <param name="hContext">Handle that identifies the resource manager context. 
            The resource manager context is set by a previous call to SCardEstablishContext.</param>
            <returns>
            If the function succeeds, the function returns SCARD_S_SUCCESS. 
            If the function fails, it returns an error code. 
            </returns>
        </member>
        <member name="M:GS.SCard.WinSCardAPIWrapper.SCardConnect(System.IntPtr,System.String,System.UInt32,System.UInt32,System.IntPtr@,System.UInt32@)">
            <summary>
            The SCardConnect function establishes a connection (using a specific resource manager context) 
            between the calling application and a smart card contained by a specific reader. 
            If no card exists in the specified reader, an error is returned.
            </summary>
            <param name="hContext">
            A handle that identifies the resource manager context.</param>
            <param name="cReaderName">The name of the reader that contains the target card.</param>
            <param name="dwShareMode">A flag that indicates whether other applications may form connections to the card.</param>
            <param name="dwPrefProtocol">
            A bitmask of acceptable protocols for the connection. Possible values may be combined with the OR operation.</param>
            <param name="phCard">A handle that identifies the connection to the smart card in the designated reader.</param>
            <param name="pdwActiveProtocol">
            A flag that indicates the established active protocol.
            </param>
            <returns>
            If the function succeeds, the function returns SCARD_S_SUCCESS. 
            If the function fails, it returns an error code. 
            </returns>
        </member>
        <member name="M:GS.SCard.WinSCardAPIWrapper.SCardDisconnect(System.IntPtr,System.UInt32)">
            <summary>
            The SCardDisconnect function terminates a connection previously opened between the calling 
            application and a smart card in the target reader.
            </summary>
            <param name="hCard">Reference value obtained from a previous call to SCardConnect.</param>
            <param name="dwDisposition">Action to take on the card in the connected reader on close.</param>
            <returns>
            If the function succeeds, the function returns SCARD_S_SUCCESS. 
            If the function fails, it returns an error code. 
            </returns>
        </member>
        <member name="M:GS.SCard.WinSCardAPIWrapper.SCardReconnect(System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.UInt32@)">
            <summary>
            The SCardReconnect function reestablishes an existing connection between the calling application and 
            a smart card. This function moves a card handle from direct access to general access, or acknowledges 
            and clears an error condition that is preventing further access to the card.
            </summary>
            <param name="hCard">
            Reference value obtained from a previous call to SCardConnect.</param>
            <param name="dwShareMode">
            A flag that indicates whether other applications may form connections to the card.
            </param>
            <param name="dwPrefProtocol">
            A bitmask of acceptable protocols for the connection. Possible values may be combined with the OR operation.
            </param>
            <param name="dwInitialization">
            Type of initialization that should be performed on the card.
            </param>
            <param name="pdwActiveProtocol">
            Flag that indicates the established active protocol.
            </param>
            <returns>
            If the function succeeds, the function returns SCARD_S_SUCCESS. 
            If the function fails, it returns an error code. 
            </returns>
        </member>
        <member name="M:GS.SCard.WinSCardAPIWrapper.SCardListReaders(System.IntPtr,System.String,System.Byte[],System.Int32@)">
            <summary>
            The SCardListReaders function provides the list of readers within a set of named reader groups, eliminating duplicates.
            </summary>
            <param name="hContext">
            Handle that identifies the resource manager context for the query.
            The resource manager context can be set by a previous call to SCardEstablishContext.
            This parameter cannot be NULL.</param>
            <param name="mszGroups">
            Names of the reader groups defined to the system, as a multi-string.
            Use a NULL value to list all readers in the system (that is, the SCard$AllReaders group).
            </param>
            <param name="mszReaders">Multi-string that lists the card readers within the supplied reader groups.</param>
            <param name="pcchReaders">Length of the mszReaders buffer in characters. </param>
            <returns>
            If the function succeeds, the function returns SCARD_S_SUCCESS. 
            If the function fails, it returns an error code. 
            </returns>
        </member>
        <member name="M:GS.SCard.WinSCardAPIWrapper.SCardGetStatusChange(System.IntPtr,System.UInt32,GS.SCard.SCARD_READERSTATE[],System.UInt32)">
            <summary>
            The SCardGetStatusChange function blocks execution until the current 
            availability of the cards in a specific set of readers changes.
            </summary>
            <param name="hContext">
            Handle that identifies the resource manager context for the query.
            The resource manager context can be set by a previous call to SCardEstablishContext.
            This parameter cannot be NULL.</param>
            <param name="dwTimeout">
            The maximum amount of time, in milliseconds, to wait for an action. 
            A value of zero causes the function to return immediately. 
            A value of INFINITE causes this function never to time out.
            </param>
            <param name="rgReaderStates">
            An array of SCARD_READERSTATE structures that specify the readers to watch, 
            and that receives the result. To be notified of the arrival of a new smart card reader, 
            set the szReader member of a SCARD_READERSTATE structure to "\\\\?PnP?\\Notification", 
            and set all of the other members of that structure to zero. Important  Each member of 
            each structure in this array must be initialized to zero and then set to specific values 
            as necessary. If this is not done, the function will fail in situations that involve 
            remote card readers.
            </param>
            <param name="cReaders">
            The number of elements in the rgReaderStates array.
            </param>
            <returns>
            If the function succeeds, the function returns SCARD_S_SUCCESS. 
            If the function fails, it returns an error code. 
            </returns>
        </member>
        <member name="M:GS.SCard.WinSCardAPIWrapper.SCardTransmit(System.IntPtr,GS.SCard.SCARD_IO_REQUEST@,System.Byte[],System.Int32,System.IntPtr,System.Byte[],System.Int32@)">
            <summary>
            The SCardTransmit function sends a service request to the smart card and expects to receive data back from the card.
            </summary>
            <param name="hCard">A reference value returned from the SCardConnect function.</param>
            <param name="pioSendPci">
            A pointer to the protocol header structure for the instruction.
            This buffer is in the format of an SCARD_IO_REQUEST structure,
            followed by the specific protocol control information (PCI).
            </param>
            <param name="pbSendBuffer">A pointer to the actual data to be written to the card. </param>
            <param name="cbSendLength">The length, in bytes, of the pbSendBuffer parameter.</param>
            <param name="pioRecvPci">
            Pointer to the protocol header structure for the instruction, followed by a buffer
            in which to receive any returned protocol control information (PCI) specific to the
            protocol in use. This parameter can be NULL if no PCI is returned.
            </param>
            <param name="pbRecvBuffer">Pointer to any data returned from the card.</param>
            <param name="pcbRecvLength">
            Supplies the length, in bytes, of the pbRecvBuffer parameter and receives the actual
            number of bytes received from the smart card.
            </param>
            <returns>
            If the function succeeds, the function returns SCARD_S_SUCCESS. 
            If the function fails, it returns an error code. 
            </returns>
        </member>
        <member name="M:GS.SCard.WinSCardAPIWrapper.SCardControl(System.IntPtr,System.UInt32,System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            The SCardControl function gives you direct control of the reader. 
            You can call it any time after a successful call to SCardConnect and 
            before a successful call to SCardDisconnect. The effect on the state 
            of the reader depends on the control code.
            </summary>
            <param name="hCard">Reference value returned from SCardConnect.</param>
            <param name="dwControlCode"></param>
            <param name="lpInBuffer"></param>
            <param name="nInBufferSize"></param>
            <param name="lpOutBuffer"></param>
            <param name="nOutBufferSize"></param>
            <param name="lpBytesReturned"></param>
            <returns>
            If the function succeeds, the function returns SCARD_S_SUCCESS. 
            If the function fails, it returns an error code. 
            </returns>
        </member>
        <member name="M:GS.SCard.WinSCardAPIWrapper.SCardFreeMemory(System.IntPtr,System.IntPtr)">
            <summary>
            The SCardFreeMemory function releases memory that has been returned 
            from the resource manager using the SCARD_AUTOALLOCATE length designator.
            </summary>
            <param name="hContext">
            Handle that identifies the resource manager context for the query.
            </param>
            <param name="pvMem">
            Memory block to be released.
            </param>
            <returns>
            If the function succeeds, the function returns SCARD_S_SUCCESS. 
            If the function fails, it returns an error code. 
            </returns>
        </member>
        <member name="M:GS.SCard.WinSCardAPIWrapper.SCardGetAttrib(System.IntPtr,System.UInt32,System.Byte[],System.Int32@)">
            <summary>
            The SCardGetAttrib function gets the current reader attributes.
            It does not affect the state of the reader, driver, or card.
            </summary>
            <param name="hContext">
            Handle that identifies the resource manager context for the query.
            </param>
            <param name="dwAttrId">
            Identifier for the attribute to get.
            </param>
            <param name="resultBuffer">
            The result buffer.
            </param>
            <param name="resultLength">
            Length of the result.
            </param>
            <returns></returns>
        </member>
        <member name="T:GS.SCard.WinSCardException">
            <summary>
            The exception that is thrown when a WinScard function error occurs.
            </summary>
        </member>
        <member name="M:GS.SCard.WinSCardException.#ctor(System.Boolean,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GS.SCard.WinSCardException"/> class.
            </summary>
            <param name="enableTrace">if set to <c>true</c> [enable trace].</param>
            <param name="winSCardfunctionName">Name of the  PC/SC API function.</param>
            <param name="status">The WinSCard status value.</param>
        </member>
        <member name="P:GS.SCard.WinSCardException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
        </member>
        <member name="P:GS.SCard.WinSCardException.Status">
            <summary>
            Gets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:GS.SCard.WinSCardException.WinSCardFunctionName">
            <summary>
            Gets the name of the PC/SC API function name.
            </summary>
            <value>The name of the WinSCard function.</value>
        </member>
        <member name="T:GS.PCSC.PCSCReader">
            <summary>
            A high level PC/SC  API.
            </summary>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Exchange(System.String)">
            <summary>
            The function Exchange sends a command APDU to a smart card and returns the response ADPU from the card. 
            </summary>
            <param name="cmdApdu">Hexadecimal string containing the command ADPU.</param>
            <returns></returns>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Exchange(System.String,System.Nullable{System.UInt16})">
            <summary>
            The function Exchange sends a command APDU to a smart card and returns the response ADPU from the card.
            </summary>
            <param name="cmdApdu">Hexadecimal  string containing the command APDU.</param>
            <param name="expectedSW1SW2">The expected status word SW1SW2.</param>
            <returns></returns>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Exchange(GS.Apdu.CmdApdu)">
            <summary>
            The function Exchange sends a command APDU to a smart card and returns the response ADPU from the card.
            </summary>
            <param name="cmdApdu">The command ADPU.</param>
            <returns>The response APDU.</returns>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Exchange(GS.Apdu.CmdApdu,System.Nullable{System.UInt16})">
            <summary>
            The function Exchange sends a command APDU to a smart card and returns the response ADPU from the card.
            </summary>
            <param name="cmdApdu">The command ADPU.</param>
            <param name="expectedSW1SW2">The expected status word SW1SW2.</param>
            <returns>The response APDU.</returns>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Exchange(System.Byte[])">
            <summary>
            The function Exchange sends a command APDU to a smart card and returns the response ADPU from the card.
            </summary>
            <param name="sendBuffer">The command ADPU.</param>
            <returns>The response APDU.</returns>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Exchange(System.Byte[],System.Nullable{System.UInt16})">
            <summary>
            The function Exchange sends a command APDU to a smart card and returns the response ADPU from the card.
            </summary>
            <param name="sendBuffer">The command ADPU.</param>
            <param name="expectedSW1SW2">The expected status word SW1SW2.</param>
            <returns>The response APDU.</returns>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Exchange(System.Byte[],System.Byte[]@)">
            <summary>
            The function Exchange sends a command APDU to a smart card and returns the response ADPU from the card.
            </summary>
            <param name="sendBuffer">The command ADPU.</param>
            <param name="responseBuffer">The response APDU.</param>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Exchange(System.Byte[],System.Byte[]@,System.Nullable{System.UInt16})">
            <summary>
            The function Exchange sends a command APDU to a smart card and returns the response ADPU from the card.
            </summary>
            <param name="sendBuffer">The command ADPU.</param>
            <param name="responseBuffer">The response APDU.</param>
            <param name="expectedSW1SW2">The expected status word SW1SW2.</param>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Exchange(System.Byte[],System.Int32,System.Byte[]@,System.Int32@)">
            <summary>
            The function Exchange sends a command APDU to a smart card and returns the response ADPU from the card.
            </summary>
            <param name="sendBuffer">The command ADPU.</param>
            <param name="sendLength">Length of the command ADPU.</param>
            <param name="responseBuffer">The response APDU.</param>
            <param name="responseLength">Length of the response APDU.</param>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Exchange(System.Byte[],System.Int32,System.Byte[]@,System.Int32@,System.Nullable{System.UInt16})">
            <summary>
            The function Exchange sends a command APDU to a smart card and returns the response ADPU from the card.
            </summary>
            <param name="sendBuffer">The command ADPU.</param>
            <param name="sendLength">Length of the command ADPU.</param>
            <param name="responseBuffer">The response APDU.</param>
            <param name="responseLength">Length of the response APDU.</param>
            <param name="expectedSW1SW2">The expected status word SW1SW2.</param>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Exchange(System.Byte[],System.Int32,System.Byte[],System.Int32@)">
            <summary>
            The function Exchange sends a command APDU to a smart card and returns the response ADPU from the card.
            </summary>
            <param name="sendBuffer">The command ADPU.</param>
            <param name="sendLength">Length of the command ADPU.</param>
            <param name="responseBuffer">The response APDU.</param>
            <param name="responseLength">
            Supplies the length, in bytes, of the response APDU buffer  and 
            receives the actual number of bytes received from the smart card.
            </param>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Exchange(System.Byte[],System.Int32,System.Byte[],System.Int32@,System.Nullable{System.UInt16})">
            <summary>
            The function Exchange sends a command APDU to a smart card and returns the response ADPU from the card.
            </summary>
            <param name="sendBuffer">The command ADPU.</param>
            <param name="sendLength">Length of the command ADPU.</param>
            <param name="responseBuffer">The response APDU.</param>
            <param name="responseLength">
            Supplies the length, in bytes, of the response APDU buffer  and 
            receives the actual number of bytes received from the smart card.
            </param>
            <param name="expectedSW1SW2">The expected status word SW1SW2.</param>
        </member>
        <member name="F:GS.PCSC.PCSCReader.readerName">
            <summary>
            Stores the actual smartcard reader name.
            </summary>
        </member>
        <member name="F:GS.PCSC.PCSCReader.SCard">
            <summary>
            WinScard Functions.
            </summary>
        </member>
        <member name="M:GS.PCSC.PCSCReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GS.PCSC.PCSCReader"/> class.
            </summary>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Connect">
            <summary>
            Establishes the smart card resourete manager context and provides the list of readers.
            </summary>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Connect(GS.SCard.Const.SCARD_SCOPE)">
            <summary>
            Establishes the smart card resourete manager context and provides the list of readers.
            </summary>
            <param name="dwScope">Scope of the resource manager context.</param>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Connect(System.String)">
            <summary>
            Establishes the smart card resourete manager context and selectes the specified reader.
            </summary>
            <param name="szReader">
            The name of the reader that contains the target card.
            </param>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Connect(System.String,GS.SCard.Const.SCARD_SCOPE)">
            <summary>
            Establishes the smart card resourete manager context and selectes the specified reader.
            </summary>
            <param name="szReader">
            The name of the reader that contains the target card.
            </param>
            <param name="dwScope">Scope of the resource manager context.</param>
        </member>
        <member name="M:GS.PCSC.PCSCReader.ActivateCard">
            <summary>
            Activates the card.
            </summary>
        </member>
        <member name="M:GS.PCSC.PCSCReader.ActivateCard(GS.SCard.Const.SCARD_PROTOCOL)">
            <summary>
            Activates the card.
            </summary>
            <param name="dwPrefProtocol">
            A bitmask of acceptable protocols for the connection. Possible values may be combined with the OR operation.
            </param>
        </member>
        <member name="M:GS.PCSC.PCSCReader.ActivateCard(GS.SCard.Const.SCARD_SHARE_MODE,GS.SCard.Const.SCARD_PROTOCOL)">
            <summary>
            Activates the card.
            </summary>
            <param name="dwShareMode">
            A flag that indicates whether other applications may form connections to the card.
            </param>
            <param name="dwPrefProtocol">
            A bitmask of acceptable protocols for the connection. Possible values may be combined with the OR operation.
            </param>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Disconnect">
            <summary>
            Disconnects the an established connection to a smart card and closes 
            an established resource manager context, freeing any resources allocated 
            under that context.
            </summary>
        </member>
        <member name="M:GS.PCSC.PCSCReader.Disconnect(GS.SCard.Const.SCARD_DISCONNECT)">
            <summary>
            Disconnects the an established connection to a smart card and closes 
            an established resource manager context, freeing any resources allocated 
            under that context.
            </summary>
            <param name="disposition">Action to take on the card in the connected reader on close.</param>
        </member>
        <member name="T:GS.SCard.ReturnCodes.SCARD_ERROR">
            <summary>
            Facility SCARD Error Messages
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_S_SUCCESS">
            <summary>
            The operation completed successfully.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_F_INTERNAL_ERROR">
            <summary>
            An internal consistency check failed.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_CANCELLED">
            <summary>
            The action was cancelled by an SCardCancel request.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_INVALID_HANDLE">
            <summary>
            The supplied handle was invalid.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_INVALID_PARAMETER">
            <summary>
            One or more of the supplied parameters could not be properly interpreted.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_INVALID_TARGET">
            <summary>
            Registry startup information is missing or invalid.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_NO_MEMORY">
            <summary>
            Not enough memory available to complete this command.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_F_WAITED_TOO_LONG">
            <summary>
            An internal consistency timer has expired.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_INSUFFICIENT_BUFFER">
            <summary>
            The data buffer to receive returned data is too small for the returned data.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_UNKNOWN_READER">
            <summary>
            The specified reader name is not recognized.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_TIMEOUT">
            <summary>
            The user-specified timeout value has expired.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_SHARING_VIOLATION">
            <summary>
            The smart card cannot be accessed because of other connections outstanding.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_NO_SMARTCARD">
            <summary>
            The operation requires a Smart Card, but no Smart Card is currently in the device.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_UNKNOWN_CARD">
            <summary>
            The specified smart card name is not recognized.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_CANT_DISPOSE">
            <summary>
            The system could not dispose of the media in the requested manner.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_PROTO_MISMATCH">
            <summary>
            The requested protocols are incompatible with the protocol currently in use with the smart card.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_NOT_READY">
            <summary>
            The reader or smart card is not ready to accept commands.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_INVALID_VALUE">
            <summary>
            One or more of the supplied parameters values could not be properly interpreted.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_SYSTEM_CANCELLED">
            <summary>
            The action was cancelled by the system, presumably to log off or shut down.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_F_COMM_ERROR">
            <summary>
            An internal communications error has been detected.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_F_UNKNOWN_ERROR">
            <summary>
            An internal error has been detected, but the source is unknown.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_INVALID_ATR">
            <summary>
            An ATR obtained from the registry is not a valid ATR string.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_NOT_TRANSACTED">
            <summary>
            An attempt was made to end a non-existent transaction.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_READER_UNAVAILABLE">
            <summary>
            The specified reader is not currently available for use.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_P_SHUTDOWN">
            <summary>
            The operation has been aborted to allow the server application to exit.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_PCI_TOO_SMALL">
            <summary>
            The PCI Receive buffer was too small.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_READER_UNSUPPORTED">
            <summary>
            The reader driver does not meet minimal requirements for support.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_DUPLICATE_READER">
            <summary>
            The reader driver did not produce a unique reader name.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_CARD_UNSUPPORTED">
            <summary>
            The smart card does not meet minimal requirements for support.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_NO_SERVICE">
            <summary>
            The Smart card resource manager is not running.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_SERVICE_STOPPED">
            <summary>
            The Smart card resource manager has shut down.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_UNEXPECTED">
            <summary>
            An unexpected card error has occurred.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_ICC_INSTALLATION">
            <summary>
            No Primary Provider can be found for the smart card.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_ICC_CREATEORDER">
            <summary>
            The requested order of object creation is not supported.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_UNSUPPORTED_FEATURE">
            <summary>
            This smart card does not support the requested feature.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_DIR_NOT_FOUND">
            <summary>
            The identified directory does not exist in the smart card.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_FILE_NOT_FOUND">
            <summary>
            The identified file does not exist in the smart card.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_NO_DIR">
            <summary>
            The supplied path does not represent a smart card directory.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_NO_FILE">
            <summary>
            The supplied path does not represent a smart card file.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_NO_ACCESS">
            <summary>
            Access is denied to this file.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_WRITE_TOO_MANY">
            <summary>
            The smartcard does not have enough memory to store the information.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_BAD_SEEK">
            <summary>
            There was an error trying to set the smart card file object pointer.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_INVALID_CHV">
            <summary>
            The supplied PIN is incorrect.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_UNKNOWN_RES_MNG">
            <summary>
            An unrecognized error code was returned from a layered component.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_NO_SUCH_CERTIFICATE">
            <summary>
            The requested certificate does not exist.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_CERTIFICATE_UNAVAILABLE">
            <summary>
            The requested certificate could not be obtained.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_NO_READERS_AVAILABLE">
            <summary>
            Cannot find a smart card reader.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_COMM_DATA_LOST">
            <summary>
            A communications error with the smart card has been detected. Retry the operation.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_NO_KEY_CONTAINER">
            <summary>
            The requested key container does not exist on the smart card.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_E_SERVER_TOO_BUSY">
            <summary>
            The Smart card resource manager is too busy to complete this operation.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_W_UNSUPPORTED_CARD">
            <summary>
            The reader cannot communicate with the smart card, due to ATR configuration conflicts.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_W_UNRESPONSIVE_CARD">
            <summary>
            The smart card is not responding to a reset.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_W_UNPOWERED_CARD">
            <summary>
            Power has been removed from the smart card, so that further communication is not possible.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_W_RESET_CARD">
            <summary>
            The smart card has been reset, so any shared state information is invalid.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_W_REMOVED_CARD">
            <summary>
            The smart card has been removed, so that further communication is not possible.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_W_SECURITY_VIOLATION">
            <summary>
            Access was denied because of a security violation.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_W_WRONG_CHV">
            <summary>
            The card cannot be accessed because the wrong PIN was presented.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_W_CHV_BLOCKED">
            <summary>
            The card cannot be accessed because the maximum number of PIN entry attempts has been reached.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_W_EOF">
            <summary>
            The end of the smart card file has been reached.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_W_CANCELLED_BY_USER">
            <summary>
            The action was cancelled by the user.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_W_CARD_NOT_AUTHENTICATED">
            <summary>
            No PIN was presented to the smart card.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_W_CACHE_ITEM_NOT_FOUND">
            <summary>
            The requested item could not be found in the cache.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_W_CACHE_ITEM_STALE">
            <summary>
            The requested cache item is too old and was deleted from the cache.
            </summary>
        </member>
        <member name="F:GS.SCard.ReturnCodes.SCARD_ERROR.SCARD_W_CACHE_ITEM_TOO_BIG">
            <summary>
            The new cache item exceeds the maximum per-item size defined for the cache.
            </summary>
        </member>
        <member name="T:GS.SCard.SCARD_IO_REQUEST">
            <summary>
            The SCARD_IO_REQUEST structure begins a protocol control information structure.
            Any protocol-specific information then immediately follows this structure.
            The entire length of the structure must be aligned with the underlying hardware
            architecture word size. For example, in Win32 the length of any PCI information
            must be a multiple of four bytes so that it aligns on a 32-bit boundary.
            </summary>
        </member>
        <member name="F:GS.SCard.SCARD_IO_REQUEST.dwProtocol">
            <summary>
            Protocol in use.
            </summary>
        </member>
        <member name="F:GS.SCard.SCARD_IO_REQUEST.cbPciLength">
            <summary>
            Length, in bytes, of the SCARD_IO_REQUEST structure plus any following PCI-specific information.
            </summary>
        </member>
        <member name="T:GS.SCard.SCARD_READERSTATE">
            <summary>
            The SCARD READERSTATE structure is used by functions for tracking smart cards within readers.
            </summary>
        </member>
        <member name="F:GS.SCard.SCARD_READERSTATE.m_szReader">
            <summary>
            A pointer to the name of the reader being monitored.
            Set the value of this member to "\\\\?PnP?\\Notification" 
            and the values of all other members to zero to be notified of the arrival of a new smart card reader.
            </summary>
        </member>
        <member name="F:GS.SCard.SCARD_READERSTATE.m_pvUserData">
            <summary>
            Not used by the smart card subsystem. This member is used by the application.
            </summary>
        </member>
        <member name="F:GS.SCard.SCARD_READERSTATE.m_dwCurrentState">
            <summary>
            Current state of the reader, as seen by the application. This field can take on any of the following values, in combination, as a bitmask. 
            </summary>
        </member>
        <member name="F:GS.SCard.SCARD_READERSTATE.m_dwEventState">
            <summary>
            Current state of the reader, as known by the smart card resource manager. This field can take on any of the following values, in combination, as a bitmask. 
            </summary>
        </member>
        <member name="F:GS.SCard.SCARD_READERSTATE.m_cbAtr">
            <summary>
            Number of bytes in the returned ATR.
            </summary>
        </member>
        <member name="F:GS.SCard.SCARD_READERSTATE.m_rgbAtr">
            <summary>
            ATR of the inserted card, with extra alignment bytes.
            </summary>
        </member>
        <member name="T:GS.SCard.Const.SCARD_SCOPE">
            <summary>
            Defines for the scope input parameter of SCardEstablishContext.  
            Generally, only User should be used.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_SCOPE.User">
            <summary>
            The context is a user context, and any database operations are performed within the
            domain of the user.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_SCOPE.Terminal">
            <summary>
            The context is that of the current terminal, and any database operations are performed
            within the domain of that terminal.  (The calling application must have appropriate
            access permissions for any database actions.)
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_SCOPE.System">
            <summary>
            The context is the system context, and any database operations are performed within the
            domain of the system.  (The calling application must have appropriate access
            permissions for any database actions.)
            </summary>
        </member>
        <member name="T:GS.SCard.Const.SCARD_SHARE_MODE">
            <summary>
            Defines for the scope input parameter of SCardEstablishContext.  
            Generally, only User should be used.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_SHARE_MODE.Exclusive">
            <summary>
            This application is willing to share the card with other applications.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_SHARE_MODE.Shared">
            <summary>
            This application is not willing to share the card with other applications.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_SHARE_MODE.Direct">
            <summary>
            This application is allocating the reader for its private use, and will be controlling it directly.
            No other applications are allowed access to it.
            </summary>
        </member>
        <member name="T:GS.SCard.Const.SCARD_PROTOCOL">
            <summary>
            The Smart Card Protocol.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_PROTOCOL.Undefined">
            <summary>
            There is no active protocol.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_PROTOCOL.T0">
            <summary>
            T=0 is the active protocol.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_PROTOCOL.T1">
            <summary>
            T=1 is the active protocol.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_PROTOCOL.Raw">
            <summary>
            Raw is the active protocol.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_PROTOCOL.Default">
            <summary>
            Use implicit Protocol Type Selection (PST)
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_PROTOCOL.Tx">
            <summary>
            T=1 or T=0 can be the active protocol
            </summary>
        </member>
        <member name="T:GS.SCard.Const.SCARD_DISCONNECT">
            <summary>
            Defines the action to take on the card in the connected reader on close.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_DISCONNECT.Leave">
            <summary>
            Don't do anything special on close
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_DISCONNECT.Reset">
            <summary>
            Reset the card on close
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_DISCONNECT.Unpower">
            <summary>
            Power down the card on close
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_DISCONNECT.Eject">
            <summary>
            Eject the card on close
            </summary>
        </member>
        <member name="T:GS.SCard.Const.SCARD_CARD_STATE">
            <summary>
            Current state of the reader, as seen by the application. 
            This field can take on any of the following values, in combination, as a bitmask. 
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CARD_STATE.UNAWARE">
            <summary>
            The application is unaware of the current state, and would like to know. 
            The use of this value results in an immediate return from state transition 
            monitoring services. This is represented by all bits set to zero.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CARD_STATE.IGNORE">
            <summary>
            The application requested that this reader be ignored.  No other
            bits will be set.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CARD_STATE.CHANGED">
            <summary>
            This implies that there is a difference between the state believed by 
            the application, and the state known by the Service Manager.  When this 
            bit is set, the application may assume a significant state change has
            occurred on this reader. 
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CARD_STATE.UNKNOWN">
            <summary>
            This implies that the given reader name is not recognized by the Service Manager.
            If this bit is set, then SCARD_STATE_CHANGED and SCARD_STATE_IGNORE will also be set.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CARD_STATE.UNAVAILABLE">
            <summary>
            This implies that the actual state of this reader is not available.  
            If this bit is set, then all the following bits are clear.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CARD_STATE.EMPTY">
            <summary>
            This implies that there is not card in the reader.  If this bit is set, all the 
            following bits will be clear.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CARD_STATE.PRESENT">
            <summary>
            // This implies that there is a card in the reader.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CARD_STATE.ATRMATCH">
            <summary>
            This implies that there is a card in the reader with an ATR matching one of 
            the target cards. If this bit is set, SCARD_STATE_PRESENT will also be set.
            This bit is only returned on the SCardLocateCard() service.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CARD_STATE.EXCLUSIVE">
            <summary>
            // This implies that the card in the reader is allocated for exclusive use by 
            another application. If this bit is set, SCARD_STATE_PRESENT will also be set.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CARD_STATE.INUSE">
            <summary>
            This implies that the card in the reader is in use by one or more other applications, 
            but may be connected to in shared mode.  If this bit is set, SCARD_STATE_PRESENT will 
            also be set.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CARD_STATE.MUTE">
            <summary>
            This implies that the card in the reader is unresponsive or not supported by 
            the reader or software.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CARD_STATE.UNPOWERED">
            <summary>
            This implies that the card in the reader has not been powered up.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CLASS.VENDOR_INFO">
            <summary>
            Vendor information definitions       
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CLASS.COMMUNICATIONS">
            <summary>
            Communication definitions            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CLASS.PROTOCOL">
            <summary>
            Protocol definitions                 
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CLASS.POWER_MGMT">
            <summary>
            Power Management definitions         
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CLASS.SECURITY">
            <summary>
            Security Assurance definitions       
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CLASS.MECHANICAL">
            <summary>
            Mechanical characteristic definitions
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CLASS.VENDOR_DEFINED">
            <summary>
            Vendor specific definitions          
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CLASS.IFD_PROTOCOL">
            <summary>
            Interface Device Protocol options    
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CLASS.ICC_STATE">
            <summary>
            ICC State specific definitions       
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CLASS.PERF">
            <summary>
            // performace counters
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_CLASS.SYSTEM">
            <summary>
            // System-specific definitions
            </summary>
        </member>
        <member name="T:GS.SCard.Const.SCARD_ATTR">
            <summary>
            
            </summary>              
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.VENDOR_NAME">
            <summary>
            Vendor name.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.VENDOR_IFD_TYPE">
            <summary>
            Vendor-supplied interface device type (model designation of reader).
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.VENDOR_IFD_VERSION">
            <summary>
            Vendor-supplied interface device version (DWORD in the form 0xMMmmbbbb where 
            MM = major version, mm = minor version, and bbbb = build number).
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.VENDOR_IFD_SERIAL_NO">
            <summary>
            Vendor-supplied interface device serial number.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.CHANNEL_ID">
             <summary>
             WORD encoded as 0xDDDDCCCC, where DDDD = data channel type and CCCC = channel number: 
            The following encodings are defined for DDDD: 
            0x01 serial I/O; CCCC is a port number. 
            0x02 parallel I/O; CCCC is a port number. 
            0x04 PS/2 keyboard port; CCCC is zero. 
            0x08 SCSI; CCCC is SCSI ID number. 
            0x10 IDE; CCCC is device number. 
            0x20 USB; CCCC is device number. 
            0xFy vendor-defined interface with y in the range zero through 15; CCCC is vendor defined.
             </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.PROTOCOL_TYPES">
            <summary>
            DWORD encoded as 0x0rrrpppp where rrr is RFU and should be 0x000. 
            pppp encodes the supported protocol types. A '1' in a given bit position 
            indicates support for the associated ISO protocol, so if bits zero and one are set,
            both T=0 and T=1 protocols are supported.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.DEFAULT_CLK">
            <summary>
            Default clock rate, in kHz.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.MAX_CLK">
            <summary>
            Maximum clock rate, in kHz.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.DEFAULT_DATA_RATE">
            <summary>
            Default data rate, in bps.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.MAX_DATA_RATE">
            <summary>
            Maximum data rate, in bps.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.MAX_IFSD">
            <summary>
            Maximum bytes for information file size device.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.POWER_MGMT_SUPPORT">
            <summary>
            Zero if device does not support power down while smart card is inserted. Nonzero otherwise.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.USER_TO_CARD_AUTH_DEVICE">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.USER_AUTH_INPUT_DEVICE">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.CHARACTERISTICS">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.CURRENT_PROTOCOL_TYPE">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.CURRENT_CLK">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.CURRENT_F">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.CURRENT_D">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.CURRENT_N">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.CURRENT_W">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.CURRENT_IFSC">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.CURRENT_IFSD">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.CURRENT_BWT">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.CURRENT_CWT">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.CURRENT_EBC_ENCODING">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.EXTENDED_BWT">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.ICC_PRESENCE">
            <summary>
            Single byte indicating smart card presence: 
            0 = not present
            1 = card present but not swallowed (applies only if reader supports smart card swallowing)
            2 = card present (and swallowed if reader supports smart card swallowing)
            4 = card confiscated.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.ICC_INTERFACE_STATUS">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.CURRENT_IO_STATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.ATR_STRING">
            <summary>
            Answer to reset (ATR) string.
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.ICC_TYPE_PER_ATR">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.ESC_RESET">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.ESC_CANCEL">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.ESC_AUTHREQUEST">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.MAXINPUT">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.DEVICE_UNIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.DEVICE_IN_USE">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.DEVICE_FRIENDLY_NAME_A">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.DEVICE_SYSTEM_NAME_A">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.DEVICE_FRIENDLY_NAME_W">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.DEVICE_SYSTEM_NAME_W">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.SUPRESS_T1_IFS_REQUEST">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.PERF_NUM_TRANSMISSIONS">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.PERF_BYTES_TRANSMITTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:GS.SCard.Const.SCARD_ATTR.PERF_TRANSMISSION_TIME">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
